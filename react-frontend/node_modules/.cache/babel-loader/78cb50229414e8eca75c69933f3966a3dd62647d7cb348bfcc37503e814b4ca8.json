{"ast":null,"code":"// Function to fetch tasks from the API\nconst fetchTasksFromApi = async () => {\n  try {\n    const response = await fetch('http://localhost:4000/todos');\n    const data = await response.json();\n    setTasks(data);\n  } catch (error) {\n    console.error('Error fetching tasks:', error);\n  }\n};\nconst addTaskToApi = async () => {\n  if (newTask.trim() === '') {\n    return;\n  }\n  const task = {\n    title: newTask\n  };\n  try {\n    const response = await fetch('http://localhost:4000/todos', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(task)\n    });\n    if (response.ok) {\n      fetchTasks();\n      setNewTask('');\n    }\n  } catch (error) {\n    console.error('Error adding task:', error);\n  }\n};\nconst deleteTaskFromApi = async id => {\n  try {\n    const response = await fetch(`http://localhost:4000/todos/${id}`, {\n      method: 'DELETE'\n    });\n    if (response.ok) {\n      fetchTasks();\n    }\n  } catch (error) {\n    console.error('Error deleting task:', error);\n  }\n};\nconst completeTaskFromApi = id => {\n  console.log(id);\n};","map":{"version":3,"names":["fetchTasksFromApi","response","fetch","data","json","setTasks","error","console","addTaskToApi","newTask","trim","task","title","method","headers","body","JSON","stringify","ok","fetchTasks","setNewTask","deleteTaskFromApi","id","completeTaskFromApi","log"],"sources":["/Users/kristian.ivanov/my-projects/todo-app/react-frontend/src/api/taskApi.js"],"sourcesContent":["// Function to fetch tasks from the API\nconst fetchTasksFromApi = async () => {\n    try {\n      const response = await fetch('http://localhost:4000/todos');\n      const data = await response.json();\n      setTasks(data);\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n    }\n  };\n\n  const addTaskToApi = async () => {\n    if (newTask.trim() === '') {\n      return;\n    }\n\n    const task = { title: newTask };\n\n    try {\n      const response = await fetch('http://localhost:4000/todos', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(task),\n      });\n\n      if (response.ok) {\n        fetchTasks();\n        setNewTask('');\n      }\n    } catch (error) {\n      console.error('Error adding task:', error);\n    }\n  };\n\n  const deleteTaskFromApi = async (id) => {\n    try {\n      const response = await fetch(`http://localhost:4000/todos/${id}`, {\n        method: 'DELETE',\n      });\n\n      if (response.ok) {\n        fetchTasks();\n      }\n    } catch (error) {\n      console.error('Error deleting task:', error);\n    }\n  };\n\n  const completeTaskFromApi = (id) => {\n    console.log(id)\n  }"],"mappings":"AAAA;AACA,MAAMA,iBAAiB,GAAG,MAAAA,CAAA,KAAY;EAClC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,CAAC;IAC3D,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAClCC,QAAQ,CAACF,IAAI,CAAC;EAChB,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;EAC/C;AACF,CAAC;AAED,MAAME,YAAY,GAAG,MAAAA,CAAA,KAAY;EAC/B,IAAIC,OAAO,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;IACzB;EACF;EAEA,MAAMC,IAAI,GAAG;IAAEC,KAAK,EAAEH;EAAQ,CAAC;EAE/B,IAAI;IACF,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,EAAE;MAC1DW,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,IAAI;IAC3B,CAAC,CAAC;IAEF,IAAIV,QAAQ,CAACiB,EAAE,EAAE;MACfC,UAAU,CAAC,CAAC;MACZC,UAAU,CAAC,EAAE,CAAC;IAChB;EACF,CAAC,CAAC,OAAOd,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;EAC5C;AACF,CAAC;AAED,MAAMe,iBAAiB,GAAG,MAAOC,EAAE,IAAK;EACtC,IAAI;IACF,MAAMrB,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+BoB,EAAE,EAAE,EAAE;MAChET,MAAM,EAAE;IACV,CAAC,CAAC;IAEF,IAAIZ,QAAQ,CAACiB,EAAE,EAAE;MACfC,UAAU,CAAC,CAAC;IACd;EACF,CAAC,CAAC,OAAOb,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;EAC9C;AACF,CAAC;AAED,MAAMiB,mBAAmB,GAAID,EAAE,IAAK;EAClCf,OAAO,CAACiB,GAAG,CAACF,EAAE,CAAC;AACjB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}