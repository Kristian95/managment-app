{"ast":null,"code":"var _s = $RefreshSig$();\n// /src/hooks/useTasks.js\nimport { useState, useEffect } from 'react';\nimport { fetchTasksFromApi, addTaskToApi, deleteTaskFromApi } from '../api/taskApi';\nconst useTasks = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Fetch tasks when component mounts\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n\n  // Fetch tasks from the API\n  const fetchTasks = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const tasksData = await fetchTasksFromApi();\n      setTasks(tasksData);\n    } catch (err) {\n      setError('Failed to load tasks');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Add a new task\n  const addTask = async () => {\n    if (newTask.trim() === '') return;\n    const task = {\n      title: newTask\n    };\n    setNewTask(''); // Clear the input field\n\n    try {\n      const newTaskResponse = await addTaskToApi(task); // Call the API function\n\n      if (newTaskResponse) {\n        // Ensure that newTaskResponse contains valid data (including 'id')\n        setTasks(prevTasks => [...prevTasks, newTaskResponse]); // Update state with the new task\n      } else {\n        console.error('Failed to add task. No task returned.');\n      }\n    } catch (err) {\n      console.error('Error adding task:', err);\n    }\n  };\n\n  // Delete a task\n  const deleteTask = async id => {\n    try {\n      await deleteTaskFromApi(id);\n      setTasks(prevTasks => prevTasks.filter(task => task.id !== id));\n    } catch (err) {\n      setError('Failed to delete task');\n    }\n  };\n  const completeTask = async id => {\n    console.log(id);\n  };\n  return {\n    tasks,\n    loading,\n    error,\n    addTask,\n    deleteTask,\n    fetchTasks,\n    completeTask\n  };\n};\n_s(useTasks, \"xNX7rGvFGr7FmlzLD7Jh7gNv014=\");\nexport default useTasks;","map":{"version":3,"names":["useState","useEffect","fetchTasksFromApi","addTaskToApi","deleteTaskFromApi","useTasks","_s","tasks","setTasks","loading","setLoading","error","setError","fetchTasks","tasksData","err","addTask","newTask","trim","task","title","setNewTask","newTaskResponse","prevTasks","console","deleteTask","id","filter","completeTask","log"],"sources":["/Users/kristian.ivanov/my-projects/todo-app/react-frontend/src/hooks/useTasks.js"],"sourcesContent":["// /src/hooks/useTasks.js\nimport { useState, useEffect } from 'react';\nimport {\n  fetchTasksFromApi,\n  addTaskToApi,\n  deleteTaskFromApi,\n} from '../api/taskApi';\n\nconst useTasks = () => {\n  const [tasks, setTasks] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Fetch tasks when component mounts\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n\n  // Fetch tasks from the API\n  const fetchTasks = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const tasksData = await fetchTasksFromApi();\n      setTasks(tasksData);\n    } catch (err) {\n      setError('Failed to load tasks');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Add a new task\n  const addTask = async () => {\n    if (newTask.trim() === '') return;\n  \n    const task = { title: newTask };\n    setNewTask('');  // Clear the input field\n  \n    try {\n      const newTaskResponse = await addTaskToApi(task);  // Call the API function\n  \n      if (newTaskResponse) {\n        // Ensure that newTaskResponse contains valid data (including 'id')\n        setTasks((prevTasks) => [...prevTasks, newTaskResponse]);  // Update state with the new task\n      } else {\n        console.error('Failed to add task. No task returned.');\n      }\n    } catch (err) {\n      console.error('Error adding task:', err);\n    }\n  };\n\n  // Delete a task\n  const deleteTask = async (id) => {\n    try {\n      await deleteTaskFromApi(id);\n      setTasks((prevTasks) => prevTasks.filter((task) => task.id !== id));\n    } catch (err) {\n      setError('Failed to delete task');\n    }\n  };\n\n  const completeTask = async (id) => {\n    console.log(id)\n  };\n\n  return {\n    tasks,\n    loading,\n    error,\n    addTask,\n    deleteTask,\n    fetchTasks,\n    completeTask\n  };\n};\n\nexport default useTasks;\n"],"mappings":";AAAA;AACA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SACEC,iBAAiB,EACjBC,YAAY,EACZC,iBAAiB,QACZ,gBAAgB;AAEvB,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACAC,SAAS,CAAC,MAAM;IACdY,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMA,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7BH,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IACd,IAAI;MACF,MAAME,SAAS,GAAG,MAAMZ,iBAAiB,CAAC,CAAC;MAC3CM,QAAQ,CAACM,SAAS,CAAC;IACrB,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZH,QAAQ,CAAC,sBAAsB,CAAC;IAClC,CAAC,SAAS;MACRF,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;;EAED;EACA,MAAMM,OAAO,GAAG,MAAAA,CAAA,KAAY;IAC1B,IAAIC,OAAO,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;IAE3B,MAAMC,IAAI,GAAG;MAAEC,KAAK,EAAEH;IAAQ,CAAC;IAC/BI,UAAU,CAAC,EAAE,CAAC,CAAC,CAAE;;IAEjB,IAAI;MACF,MAAMC,eAAe,GAAG,MAAMnB,YAAY,CAACgB,IAAI,CAAC,CAAC,CAAE;;MAEnD,IAAIG,eAAe,EAAE;QACnB;QACAd,QAAQ,CAAEe,SAAS,IAAK,CAAC,GAAGA,SAAS,EAAED,eAAe,CAAC,CAAC,CAAC,CAAE;MAC7D,CAAC,MAAM;QACLE,OAAO,CAACb,KAAK,CAAC,uCAAuC,CAAC;MACxD;IACF,CAAC,CAAC,OAAOI,GAAG,EAAE;MACZS,OAAO,CAACb,KAAK,CAAC,oBAAoB,EAAEI,GAAG,CAAC;IAC1C;EACF,CAAC;;EAED;EACA,MAAMU,UAAU,GAAG,MAAOC,EAAE,IAAK;IAC/B,IAAI;MACF,MAAMtB,iBAAiB,CAACsB,EAAE,CAAC;MAC3BlB,QAAQ,CAAEe,SAAS,IAAKA,SAAS,CAACI,MAAM,CAAER,IAAI,IAAKA,IAAI,CAACO,EAAE,KAAKA,EAAE,CAAC,CAAC;IACrE,CAAC,CAAC,OAAOX,GAAG,EAAE;MACZH,QAAQ,CAAC,uBAAuB,CAAC;IACnC;EACF,CAAC;EAED,MAAMgB,YAAY,GAAG,MAAOF,EAAE,IAAK;IACjCF,OAAO,CAACK,GAAG,CAACH,EAAE,CAAC;EACjB,CAAC;EAED,OAAO;IACLnB,KAAK;IACLE,OAAO;IACPE,KAAK;IACLK,OAAO;IACPS,UAAU;IACVZ,UAAU;IACVe;EACF,CAAC;AACH,CAAC;AAACtB,EAAA,CApEID,QAAQ;AAsEd,eAAeA,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}