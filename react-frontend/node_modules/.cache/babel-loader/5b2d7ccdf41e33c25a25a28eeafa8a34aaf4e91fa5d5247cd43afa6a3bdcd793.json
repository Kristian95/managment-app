{"ast":null,"code":"var _s = $RefreshSig$();\n// /src/hooks/useTasks.js\nimport { useState, useEffect } from 'react';\nimport { fetchTasksFromApi, addTaskToApi, deleteTaskFromApi } from '../api/taskApi';\nconst useTasks = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [newTask, setNewTask] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Fetch tasks when component mounts\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n\n  // Fetch tasks from the API and update state\n  const fetchTasks = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const data = await fetchTasksFromApi();\n      setTasks(data); // Update the state with fetched tasks\n    } catch (err) {\n      setError('Failed to load tasks');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Add a new task\n  const addTask = async () => {\n    if (newTask.trim() === '') return;\n    const task = {\n      title: newTask\n    };\n    setNewTask(''); // Clear the input field\n\n    try {\n      const newTask = await addTaskToApi(task); // Call the API function\n      if (newTask) {\n        setTasks(prevTasks => [...prevTasks, newTask]); // Update state with the new task\n      }\n    } catch (err) {\n      setError('Failed to add task');\n    }\n  };\n\n  // Delete a task\n  const deleteTask = async id => {\n    try {\n      const deletedId = await deleteTaskFromApi(id); // Call the API function\n      if (deletedId) {\n        setTasks(prevTasks => prevTasks.filter(task => task.id !== deletedId)); // Remove the deleted task from state\n      }\n    } catch (err) {\n      setError('Failed to delete task');\n    }\n  };\n  return {\n    tasks,\n    newTask,\n    setNewTask,\n    loading,\n    error,\n    addTask,\n    deleteTask,\n    fetchTasks\n  };\n};\n_s(useTasks, \"bKXzN48lMPQ2pz7VWLsUPWnDpww=\");\nexport default useTasks;","map":{"version":3,"names":["useState","useEffect","fetchTasksFromApi","addTaskToApi","deleteTaskFromApi","useTasks","_s","tasks","setTasks","newTask","setNewTask","loading","setLoading","error","setError","fetchTasks","data","err","addTask","trim","task","title","prevTasks","deleteTask","id","deletedId","filter"],"sources":["/Users/kristian.ivanov/my-projects/todo-app/react-frontend/src/api/taskApi.js"],"sourcesContent":["// /src/hooks/useTasks.js\nimport { useState, useEffect } from 'react';\nimport {\n  fetchTasksFromApi,\n  addTaskToApi,\n  deleteTaskFromApi,\n} from '../api/taskApi';\n\nconst useTasks = () => {\n  const [tasks, setTasks] = useState([]);\n  const [newTask, setNewTask] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Fetch tasks when component mounts\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n\n  // Fetch tasks from the API and update state\n  const fetchTasks = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const data = await fetchTasksFromApi();\n      setTasks(data);  // Update the state with fetched tasks\n    } catch (err) {\n      setError('Failed to load tasks');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Add a new task\n  const addTask = async () => {\n    if (newTask.trim() === '') return;\n\n    const task = { title: newTask };\n    setNewTask('');  // Clear the input field\n\n    try {\n      const newTask = await addTaskToApi(task);  // Call the API function\n      if (newTask) {\n        setTasks((prevTasks) => [...prevTasks, newTask]);  // Update state with the new task\n      }\n    } catch (err) {\n      setError('Failed to add task');\n    }\n  };\n\n  // Delete a task\n  const deleteTask = async (id) => {\n    try {\n      const deletedId = await deleteTaskFromApi(id);  // Call the API function\n      if (deletedId) {\n        setTasks((prevTasks) => prevTasks.filter((task) => task.id !== deletedId));  // Remove the deleted task from state\n      }\n    } catch (err) {\n      setError('Failed to delete task');\n    }\n  };\n\n  return {\n    tasks,\n    newTask,\n    setNewTask,\n    loading,\n    error,\n    addTask,\n    deleteTask,\n    fetchTasks,\n  };\n};\n\nexport default useTasks;\n"],"mappings":";AAAA;AACA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SACEC,iBAAiB,EACjBC,YAAY,EACZC,iBAAiB,QACZ,gBAAgB;AAEvB,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACAC,SAAS,CAAC,MAAM;IACdc,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMA,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7BH,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IACd,IAAI;MACF,MAAME,IAAI,GAAG,MAAMd,iBAAiB,CAAC,CAAC;MACtCM,QAAQ,CAACQ,IAAI,CAAC,CAAC,CAAE;IACnB,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZH,QAAQ,CAAC,sBAAsB,CAAC;IAClC,CAAC,SAAS;MACRF,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;;EAED;EACA,MAAMM,OAAO,GAAG,MAAAA,CAAA,KAAY;IAC1B,IAAIT,OAAO,CAACU,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;IAE3B,MAAMC,IAAI,GAAG;MAAEC,KAAK,EAAEZ;IAAQ,CAAC;IAC/BC,UAAU,CAAC,EAAE,CAAC,CAAC,CAAE;;IAEjB,IAAI;MACF,MAAMD,OAAO,GAAG,MAAMN,YAAY,CAACiB,IAAI,CAAC,CAAC,CAAE;MAC3C,IAAIX,OAAO,EAAE;QACXD,QAAQ,CAAEc,SAAS,IAAK,CAAC,GAAGA,SAAS,EAAEb,OAAO,CAAC,CAAC,CAAC,CAAE;MACrD;IACF,CAAC,CAAC,OAAOQ,GAAG,EAAE;MACZH,QAAQ,CAAC,oBAAoB,CAAC;IAChC;EACF,CAAC;;EAED;EACA,MAAMS,UAAU,GAAG,MAAOC,EAAE,IAAK;IAC/B,IAAI;MACF,MAAMC,SAAS,GAAG,MAAMrB,iBAAiB,CAACoB,EAAE,CAAC,CAAC,CAAE;MAChD,IAAIC,SAAS,EAAE;QACbjB,QAAQ,CAAEc,SAAS,IAAKA,SAAS,CAACI,MAAM,CAAEN,IAAI,IAAKA,IAAI,CAACI,EAAE,KAAKC,SAAS,CAAC,CAAC,CAAC,CAAE;MAC/E;IACF,CAAC,CAAC,OAAOR,GAAG,EAAE;MACZH,QAAQ,CAAC,uBAAuB,CAAC;IACnC;EACF,CAAC;EAED,OAAO;IACLP,KAAK;IACLE,OAAO;IACPC,UAAU;IACVC,OAAO;IACPE,KAAK;IACLK,OAAO;IACPK,UAAU;IACVR;EACF,CAAC;AACH,CAAC;AAACT,EAAA,CAhEID,QAAQ;AAkEd,eAAeA,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}